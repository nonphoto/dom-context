<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <script type="module" src="../index.js"></script>
  </head>
  <body>
    <style>
      body {
        margin: 0;
        padding: 0;
        font-family: -apple-system, BlinkMacSystemFont, sans-serif;
      }
      main {
        position: relative;
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 100vh;
        overflow: hidden;
      }
      a {
        position: relative;
        font-size: 6rem;
        letter-spacing: -0.06ch;
        margin: 0;
        cursor: pointer;
        text-decoration: none;
        color: inherit;
      }
      div {
        position: fixed;
        top: 0;
        left: 0;
        width: 50vmin;
        height: 50vmin;
        pointer-events: none;
        z-index: -1;
        background-color: lightgray;
        transform: scale(0);
      }
      img {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
      }
    </style>
    <script context src>
      export default () => {
        const mouse = Stream.data([]);
        const handleMousemove = (event) =>
          mouse([event.clientX, event.clientY]);
        window.addEventListener("mousemove", handleMousemove);
        Stream.cleanup(() => {
          window.removeEventListener("mousemove", handleMousemove);
        });
        const time = Stream.data(0);
        (function tick(_t) {
          time(_t);
          requestAnimationFrame(tick);
        })(0);
        return { mouse, time };
      };
    </script>
    <main>
      <script context src>
        export default (context) => {
          const activeKey = Stream.data(null);
          const mouseenter = (event) =>
            void activeKey(event.target.dataset.key);
          const mouseleave = () => void activeKey(undefined);
          const items = Stream.data([]);
          const fitRect = (rect, target) => {
            var sw = target[2] / rect[2];
            var sh = target[3] / rect[3];
            var scale = (sw + sh) / 2;
            return [
              target[0] + (target[2] - rect[2] * scale) / 2,
              target[1] + (target[3] - rect[3] * scale) / 2,
              rect[2] * scale,
              rect[3] * scale,
            ];
          };
          const rects = Stream(() =>
            Object.fromEntries(
              items().map((item) => [
                item.dataset.key,
                fitRect([0, 0, 1, item.dataset.aspectRatio], [0, 0, 1, 1]),
              ])
            )
          );
          const containerScale = Stream.on(
            context.time,
            ([w, h]) => {
              const [, , wt, ht] = activeKey()
                ? rects()[activeKey()]
                : [0, 0, 1.5, 0];
              return [w + (wt - w) * 0.2, h + (ht - h) * 0.2];
            },
            [1.5, 0]
          );
          const transform = Stream(
            () =>
              `translate(${context.mouse()[0]}px, ${context.mouse()[1]}px)
                translate(-50%, -50%)
                scale(${containerScale()[0]}, ${containerScale()[1]})
                `
          );
          return {
            activeKey,
            mouseenter,
            mouseleave,
            items,
            transform,
          };
        };
      </script>
      <a
        bind-on="mouseenter: mouseenter; mouseleave: mouseleave"
        href="/"
        data-key="alpha"
        >Alpha</a
      >
      <a
        bind-on="mouseenter: mouseenter; mouseleave: mouseleave"
        href="/"
        data-key="bravo"
        >Bravo</a
      >
      <a
        bind-on="mouseenter: mouseenter; mouseleave: mouseleave"
        href="/"
        data-key="charlie"
        >Charlie</a
      >
      <a
        bind-on="mouseenter: mouseenter; mouseleave: mouseleave"
        href="/"
        data-key="delta"
        >Delta</a
      >
      <a
        bind-on="mouseenter: mouseenter; mouseleave: mouseleave"
        href="/"
        data-key="echo"
        >Echo</a
      >
      <div bind-style="transform: transform" data-turbo-permanent>
        <script context src>
          export default (context) => {
            const opacity = (element) =>
              Stream.on(
                context.time,
                (o) =>
                  o +
                  ((context.activeKey() === element.dataset.key ? 1 : 0) - o) *
                    0.2,
                0
              );
            return { opacity };
          };
        </script>
        <img
          bind-style="opacity: opacity"
          bind-multiref="items"
          data-key="alpha"
          data-aspect-ratio="0.634"
          src="https://images.unsplash.com/photo-1509957660513-3cfee07defec?w=1000&q=80"
        />
        <img
          bind-style="opacity: opacity"
          bind-multiref="items"
          data-key="bravo"
          data-aspect-ratio="1.145"
          src="https://images.unsplash.com/photo-1497377701144-65a4a020f4c9?w=1000&q=80"
        />
        <img
          bind-style="opacity: opacity"
          bind-multiref="items"
          data-key="charlie"
          data-aspect-ratio="0.748"
          src="https://images.unsplash.com/photo-1531523499679-7416e782dd96?w=1000&q=80"
        />
        <img
          bind-style="opacity: opacity"
          bind-multiref="items"
          data-key="delta"
          data-aspect-ratio="1.780"
          src="https://images.unsplash.com/photo-1535629097462-c777c5b466a1?w=1000&q=80"
        />
        <img
          bind-style="opacity: opacity"
          bind-multiref="items"
          data-key="echo"
          data-aspect-ratio="0.5625"
          src="https://images.unsplash.com/photo-1506170206-a6920d212828?w=1000&q=80"
        />
      </div>
    </main>
  </body>
</html>
